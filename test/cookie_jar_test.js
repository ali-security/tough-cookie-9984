/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\nvar vows = require('vows');\nvar assert = require('assert');\nvar async = require('async');\nvar tough = require('../lib/cookie');\nvar Cookie = tough.Cookie;\nvar CookieJar = tough.CookieJar;\n\nvar atNow = Date.now();\n\nfunction at(offset) {\n  return {now: new Date(atNow + offset)};\n}\n\nvows\n  .describe('CookieJar')\n  .addBatch({\n    "Setting a basic cookie": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=example.com; Path=/");\n        assert.strictEqual(c.hostOnly, null);\n        assert.instanceOf(c.creation, Date);\n        assert.strictEqual(c.lastAccessed, null);\n        c.creation = new Date(Date.now() - 10000);\n        cj.setCookie(c, 'http://example.com/index.html', this.callback);\n      },\n      "works": function (c) {\n        assert.instanceOf(c, Cookie)\n      }, // C is for Cookie, good enough for me\n      "gets timestamped": function (c) {\n        assert.ok(c.creation);\n        assert.ok(Date.now() - c.creation.getTime() < 5000); // recently stamped\n        assert.ok(c.lastAccessed);\n        assert.equal(c.creation, c.lastAccessed);\n        assert.equal(c.TTL(), Infinity);\n        assert.ok(!c.isPersistent());\n      }\n    },\n    "Setting a no-path cookie": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=example.com");\n        assert.strictEqual(c.hostOnly, null);\n        assert.instanceOf(c.creation, Date);\n        assert.strictEqual(c.lastAccessed, null);\n        c.creation = new Date(Date.now() - 10000);\n        cj.setCookie(c, 'http://example.com/index.html', this.callback);\n      },\n      "domain": function (c) {\n        assert.equal(c.domain, 'example.com')\n      },\n      "path is /": function (c) {\n        assert.equal(c.path, '/')\n      },\n      "path was derived": function (c) {\n        assert.strictEqual(c.pathIsDefault, true)\n      }\n    },\n    "Setting a cookie already marked as host-only": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=example.com");\n        assert.strictEqual(c.hostOnly, null);\n        assert.instanceOf(c.creation, Date);\n        assert.strictEqual(c.lastAccessed, null);\n        c.creation = new Date(Date.now() - 10000);\n        c.hostOnly = true;\n        cj.setCookie(c, 'http://example.com/index.html', this.callback);\n      },\n      "domain": function (c) {\n        assert.equal(c.domain, 'example.com')\n      },\n      "still hostOnly": function (c) {\n        assert.strictEqual(c.hostOnly, true)\n      }\n    },\n    "Setting a session cookie": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b");\n        assert.strictEqual(c.path, null);\n        cj.setCookie(c, 'http://www.example.com/dir/index.html', this.callback);\n      },\n      "works": function (c) {\n        assert.instanceOf(c, Cookie)\n      },\n      "gets the domain": function (c) {\n        assert.equal(c.domain, 'www.example.com')\n      },\n      "gets the default path": function (c) {\n        assert.equal(c.path, '/dir')\n      },\n      "is 'hostOnly'": function (c) {\n        assert.ok(c.hostOnly)\n      }\n    },\n    "Setting wrong domain cookie": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=fooxample.com; Path=/");\n        cj.setCookie(c, 'http://example.com/index.html', this.callback);\n      },\n      "fails": function (err, c) {\n        assert.ok(err.message.match(/domain/i));\n        assert.ok(!c);\n      }\n    },\n    "Setting sub-domain cookie": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=www.example.com; Path=/");\n        cj.setCookie(c, 'http://example.com/index.html', this.callback);\n      },\n      "fails": function (err, c) {\n        assert.ok(err.message.match(/domain/i));\n        assert.ok(!c);\n      }\n    },\n    "Setting super-domain cookie": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=example.com; Path=/");\n        cj.setCookie(c, 'http://www.app.example.com/index.html', this.callback);\n      },\n      "success": function (err, c) {\n        assert.ok(!err);\n        assert.equal(c.domain, 'example.com');\n      }\n    },\n    "Setting a sub-path cookie on a super-domain": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=example.com; Path=/subpath");\n        assert.strictEqual(c.hostOnly, null);\n        assert.instanceOf(c.creation, Date);\n        assert.strictEqual(c.lastAccessed, null);\n        c.creation = new Date(Date.now() - 10000);\n        cj.setCookie(c, 'http://www.example.com/index.html', this.callback);\n      },\n      "domain is super-domain": function (c) {\n        assert.equal(c.domain, 'example.com')\n      },\n      "path is /subpath": function (c) {\n        assert.equal(c.path, '/subpath')\n      },\n      "path was NOT derived": function (c) {\n        assert.strictEqual(c.pathIsDefault, null)\n      }\n    },\n    "Setting HttpOnly cookie over non-HTTP API": {\n      topic: function () {\n        var cj = new CookieJar();\n        var c = Cookie.parse("a=b; Domain=example.com; Path=/; HttpOnly");\n        cj.setCookie(c, 'http://example.com/index.html', {http: false}, this.callback);\n      },\n      "fails": function (err, c) {\n        assert.match(err.message, /HttpOnly/i);\n        assert.ok(!c);\n      }\n    }\n  })\n  .addBatch({\n    "Store eight cookies": {\n      topic: function () {\n        var cj = new CookieJar();\n        var ex = 'http://example.com/index.html';\n        var tasks = [];\n        tasks.push(function (next) {\n          cj.setCookie('a=1; Domain=example.com; Path=/', ex, at(0), next);\n        });\n        tasks.push(function (next) {\n          cj.setCookie('b=2; Domain=example.com; Path=/; HttpOnly', ex, at(1000), next);\n        });\n        tasks.push(function (next) {\n          cj.setCookie('c=3; Domain=example.com; Path=/; Secure', ex, at(2000), next);\n        });\n        tasks.push(function (next) { // path\n          cj.setCookie('d=4; Domain=example.com; Path=/foo', ex, at(3000), next);\n        });\n        tasks.push(function (next) { // host only\n          cj.setCookie('e=5', ex, at(4000), next);\n        });\n        tasks.push(function (next) { // other domain\n          cj.setCookie('f=6; Domain=nodejs.org; Path=/', 'http://nodejs.org', at(5000), next);\n        });\n        tasks.push(function (next) { // expired\n          cj.setCookie('g=7; Domain=example.com; Path=/; Expires=Tue, 18 Oct 2011 00:00:00 GMT', ex, at(6000), next);\n        });\n        tasks.push(function (next) { // expired via Max-Age\n          cj.setCookie('h=8; Domain=example.com; Path=/; Max-Age=1', ex, next);\n        });\n        var cb = this.callback;\n        async.parallel(tasks, function (err, results) {\n          setTimeout(function () {\n            cb(err, cj, results);\n          }, 2000); // so that 'h=8' expires\n        });\n      },\n      "setup ok": function (err, cj, results) {\n        assert.ok(!err);\n        assert.ok(cj);\n        assert.ok(results);\n      },\n      "then retrieving for http://nodejs.org": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('http://nodejs.org', this.callback);\n        },\n        "get a nodejs cookie": function (cookies) {\n          assert.lengthOf(cookies, 1);\n          var cookie = cookies[0];\n          assert.equal(cookie.domain, 'nodejs.org');\n        }\n      },\n      "then retrieving for https://example.com": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('https://example.com', {secure: true}, this.callback);\n        },\n        "get a secure example cookie with others": function (cookies) {\n          var names = cookies.map(function (c) {\n            return c.key\n          });\n          assert.deepEqual(names, ['a', 'b', 'c', 'e']);\n        }\n      },\n      "then retrieving for https://example.com (missing options)": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('https://example.com', this.callback);\n        },\n        "get a secure example cookie with others": function (cookies) {\n          var names = cookies.map(function (c) {\n            return c.key\n          });\n          assert.deepEqual(names, ['a', 'b', 'c', 'e']);\n        }\n      },\n      "then retrieving for http://example.com": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('http://example.com', this.callback);\n        },\n        "get a bunch of cookies": function (cookies) {\n          var names = cookies.map(function (c) {\n            return c.key\n          });\n          assert.deepEqual(names, ['a', 'b', 'e']);\n        }\n      },\n      "then retrieving for http://EXAMPlE.com": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('http://EXAMPlE.com', this.callback);\n        },\n        "get a bunch of cookies": function (cookies) {\n          var names = cookies.map(function (c) {\n            return c.key\n          });\n          assert.deepEqual(names, ['a', 'b', 'e']);\n        }\n      },\n      "then retrieving for http://example.com, non-HTTP": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('http://example.com', {http: false}, this.callback);\n        },\n        "get a bunch of cookies": function (cookies) {\n          var names = cookies.map(function (c) {\n            return c.key\n          });\n          assert.deepEqual(names, ['a', 'e']);\n        }\n      },\n      "then retrieving for http://example.com/foo/bar": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('http://example.com/foo/bar', this.callback);\n        },\n        "get a bunch of cookies": function (cookies) {\n          var names = cookies.map(function (c) {\n            return c.key\n          });\n          assert.deepEqual(names, ['d', 'a', 'b', 'e']);\n        }\n      },\n      "then retrieving for http://example.com as a string": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookieString('http://example.com', this.callback);\n        },\n        "get a single string": function (cookieHeader) {\n          assert.equal(cookieHeader, "a=1; b=2; e=5");\n        }\n      },\n      "then retrieving for http://example.com as a set-cookie header": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getSetCookieStrings('http://example.com', this.callback);\n        },\n        "get a single string": function (cookieHeaders) {\n          assert.lengthOf(cookieHeaders, 3);\n          assert.equal(cookieHeaders[0], "a=1; Domain=example.com; Path=/");\n          assert.equal(cookieHeaders[1], "b=2; Domain=example.com; Path=/; HttpOnly");\n          assert.equal(cookieHeaders[2], "e=5; Path=/");\n        }\n      },\n      "then retrieving for http://www.example.com/": {\n        topic: function (cj, oldResults) {\n          assert.ok(oldResults);\n          cj.getCookies('http://www.example.com/foo/bar', this.callback);\n        },\n        "get a bunch of cookies": function (cookies) {\n          var names = cookies.map(function (c) {\n            return c.key\n          });\n          assert.deepEqual(names, ['d', 'a', 'b']); // note lack of 'e'\n        }\n      }\n    }\n  })\n  .addBatch({\n    "Repeated names": {\n      topic: function () {\n        var cb = this.callback;\n        var cj = new CookieJar();\n        var ex = 'http://www.example.com/';\n        var sc = cj.setCookie;\n        var tasks = [];\n        var now = Date.now();\n        tasks.push(sc.bind(cj, 'aaaa=xxxx', ex, at(0)));\n        tasks.push(sc.bind(cj, 'aaaa=1111; Domain=www.example.com', ex, at(1000)));\n        tasks.push(sc.bind(cj, 'aaaa=2222; Domain=example.com', ex, at(2000)));\n        tasks.push(sc.bind(cj, 'aaaa=3333; Domain=www.example.com; Path=/pathA', ex, at(3000)));\n        async.series(tasks, function (err, results) {\n          results = results.filter(function (e) {\n            return e !== undefined\n          });\n          cb(err, {cj: cj, cookies: results, now: now});\n        });\n      },\n      "all got set": function (err, t) {\n        assert.lengthOf(t.cookies, 4);\n      },\n      "then getting 'em back": {\n        topic: function (t) {\n          var cj = t.cj;\n          cj.getCookies('http://www.example.com/pathA', this.callback);\n        },\n        "there's just three": function (err, cookies) {\n          var vals = cookies.map(function (c) {\n            return c.value\n          });\n          // may break with sorting; sorting should put 3333 first due to longest path:\n          assert.deepEqual(vals, ['3333', '1111', '2222']);\n        }\n      }\n    }\n  })\n  .addBatch({\n    "CookieJar setCookie errors": {\n      "public-suffix domain": {\n        topic: function () {\n          var cj = new CookieJar();\n          cj.setCookie('i=9; Domain=kyoto.jp; Path=/', 'kyoto.jp', this.callback);\n        },\n        "errors": function (err, cookie) {\n          assert.ok(err);\n          assert.ok(!cookie);\n          assert.match(err.message, /public suffix/i);\n        }\n      },\n      "wrong domain": {\n        topic: function () {\n          var cj = new CookieJar();\n          cj.setCookie('j=10; Domain=google.com; Path=/', 'http://google.ca', this.callback);\n        },\n        "errors": function (err, cookie) {\n          assert.ok(err);\n          assert.ok(!cookie);\n          assert.match(err.message, /not in this host's domain/i);\n        }\n      },\n      "old cookie is HttpOnly": {\n        topic: function () {\n          var cb = this.callback;\n          var next = function (err, c) {\n            c = null;\n            return cb(err, cj);\n          };\n          var cj = new CookieJar();\n          cj.setCookie('k=11; Domain=example.ca; Path=/; HttpOnly', 'http://example.ca', {http: true}, next);\n        },\n        "initial cookie is set": function (err, cj) {\n          assert.ok(!err);\n          assert.ok(cj);\n        },\n        "but when trying to overwrite": {\n          topic: function (cj) {\n            var cb = this.callback;\n            var next = function (err, c) {\n              c = null;\n              cb(null, err);\n            };\n            cj.setCookie('k=12; Domain=example.ca; Path=/', 'http://example.ca', {http: false}, next);\n          },\n          "it's an error": function (err) {\n            assert.ok(err);\n          },\n          "then, checking the original": {\n            topic: function (ignored, cj) {\n              assert.ok(cj instanceof CookieJar);\n              cj.getCookies('http://example.ca', {http: true}, this.callback);\n            },\n            "cookie has original value": function (err, cookies) {\n              assert.equal(err, null);\n              assert.lengthOf(cookies, 1);\n              assert.equal(cookies[0].value, 11);\n            }\n          }\n        }\n      },\n      "similar to public suffix": {\n        topic: function () {\n          var cj = new CookieJar();\n          var url = 'http://www.foonet.net';\n          assert.isTrue(cj.rejectPublicSuffixes);\n          cj.setCookie('l=13; Domain=foonet.net; Path=/', url, this.callback);\n        },\n        "doesn't error": function (err, cookie) {\n          assert.ok(!err);\n          assert.ok(cookie);\n        }\n      }\n    }\n  })\n  .addBatch({\n    "Loose Mode": {\n      topic: function () {\n        var cj = new CookieJar(null, {looseMode: true});\n        cj.setCookieSync("FooBar", 'http://www.foonet.net', {});\n        return cj;\n      },\n      "parses loose cookies": function (cj) {\n        var cookies = cj.getCookiesSync('http://www.foonet.net');\n        assert.strictEqual(cookies.length, 1);\n        assert.strictEqual(cookies[0].key, '');\n        assert.strictEqual(cookies[0].value, 'FooBar');\n      }\n    }\n  })\n  .addBatch({\n    "Issue #282 - Prototype pollution": {\n      "when setting a cookie with the domain __proto__": {\n        topic: function() {\n          const jar = new tough.CookieJar(undefined, {\n            rejectPublicSuffixes: false\n          });\n          // try to pollute the prototype\n          jar.setCookie(\n            "Slonser=polluted; Domain=__proto__; Path=/notauth",\n            "https://__proto__/admin",\n            (err) => {\n              if (err) { throw err; }\n              jar.setCookie(\n                "Auth=Lol; Domain=google.com; Path=/notauth",\n                "https://google.com/",\n                (err) => {\n                  if (err) { throw err; }\n                  this.callback();\n                }\n              );\n            }\n          );\n        },\n        "results in a cookie that is not affected by the attempted prototype pollution": function() {\n          const pollutedObject = {};\n          assert(pollutedObject["/notauth"] === undefined);\n        }\n      }\n    }\n  })\n  .export(module);\n